# docker-compose.yml

services:
  # AI 분석 서버
  ai-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: ai-image-analysis-server
    container_name: ai-image-analysis-server
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./models:/app/models
      - ./data:/app/data
      - ./temp:/app/temp
    environment:
      - DEVICE=cuda                           # 'cpu' 또는 'cuda' 설정
      - MODEL_NAME=llava-hf/llava-1.5-7b-hf  # 사용할 모델 이름
      - PRELOAD_MODEL=false                  # 시작 시 모델 자동 로드 여부
      - LOG_LEVEL=INFO                       # 로그 레벨
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_REGION=${AWS_S3_REGION}
      - ENABLE_CACHING=true                  # 결과 캐싱 활성화 여부
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '4'
    #       memory: 8G  # 모델 크기에 따라 조정 필요
    #     reservations:
    #       cpus: '2'
    #       memory: 4G

  # 모니터링 서비스 (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - ai-network
    depends_on:
      - ai-server

  # 시각화 대시보드 (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - ai-network
    depends_on:
      - prometheus

networks:
  ai-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: